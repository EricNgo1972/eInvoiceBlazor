@page "/ChangePassword"


@namespace eInvoiceApp.Views

@using eInvoiceApp.Account

<AuthorizeView>
    <Authorized>
        <h3>Đổi mật khẩu</h3>

        <hr />

        <EditForm Model="@PassReset" OnValidSubmit="@Submit" Context="EditFormContext" >

            <DxFormLayout>

                <ValidationSummary></ValidationSummary>
                <RuleValidator @ref="validator"></RuleValidator>

                <DxFormLayoutItem Caption="Email đăng nhập:">
                    <Template Context="p">
                        <DxTextBox @bind-Text="@PassReset.Email"></DxTextBox>
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Mật khẩu:" BeginRow="true">
                    <Template Context="p">
                        <DxTextBox @bind-Text="@PassReset.OldPassword" Password="true" autocomplete="off"></DxTextBox>
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Mật khẩu mới:" BeginRow="true">
                    <Template Context="p">
                        <DxTextBox @bind-Text="@PassReset.NewPassword" Password="true"></DxTextBox>
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Nhập lại mật khẩu mới:">
                    <Template Context="p">
                        <DxTextBox @bind-Text="@PassReset.ReTypePassword" Password="true"></DxTextBox>
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="4" ColSpanSm="12">
                    <Template Context="p">
                        <DevExpress.Blazor.DxButton Text="Đổi mật khẩu ..." SubmitFormOnClick="true" IconCssClass="oi oi-key"></DevExpress.Blazor.DxButton>
                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>


        </EditForm>

    </Authorized>
</AuthorizeView>

@code {

    //0107654566
    //1H8WGVV

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    [Parameter]
    public string Email { get; set; }

    public ChangePasswordModel PassReset = new ChangePasswordModel();

    RuleValidator validator = new RuleValidator();

    private async Task Submit()
    {

        if (PassReset != null)
        {

            validator.ClearErrors();

            var error = PassReset.GetValidationData();

            if (error == null)
            {
                try
                {

                    await SPC.Cloud.Members.Subscriber.ChangePasswordAsync(PassReset.Email, PassReset.OldPassword, PassReset.NewPassword, PassReset.ReTypePassword);

                    PassReset.OldPassword = "";
                    PassReset.NewPassword = "";
                    PassReset.ReTypePassword = "";

                    StateHasChanged();

                    SPC.Services.UI.AlertService.Alert("Mật khẩu đã được thay đổi");
                }
                catch (Exception ex)
                {
                    SPC.Services.UI.AlertService.ShowError(ex);
                }
            }
            else
            {
                validator.DisplayErrors(error);
            }

        }


    }

    protected async override Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;

        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            PassReset = new ChangePasswordModel() { Email = user.Identity.Name, OldPassword = "-"};
        }

        await  base.OnParametersSetAsync();

        //@onfocus="@(async ()=> await DoSubmit(EditFormContext))"
    }

}
